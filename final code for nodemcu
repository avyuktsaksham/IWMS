#include <ESP8266WiFi.h>  

const char* ssid = "YOUR_SSID"; // Wi-Fi credentials  
const char* password = "YOUR_PASSWORD"; // Wi-Fi credentials  
const char* thingworxServer = "thingworx.scetngp.com"; // Your ThingWorx server endpoint  
const char* thingName = "WaterQualityMonitor"; // Name of your Thing  
const char* valueStream = "WaterQualityData"; // ValueStream name  
const char* appKey = "ff01c8a0-6a69-47df-b123-871f9166a941"; // Your Application Key  

void setup() {  
    Serial.begin(9600); // Start serial communication  
    WiFi.begin(ssid, password); // Connect to Wi-Fi  

    while (WiFi.status() != WL_CONNECTED) {  
        delay(500);  
        Serial.println("Connecting to WiFi...");  
    }  
    Serial.println("Connected to WiFi");  
}  

void loop() {  
    // Read data from Arduino  
    if (Serial.available() > 0) {  
        String data = Serial.readStringUntil('\n');  
        data.trim(); // Remove any extra spaces/newlines  
        sendToThingworx(data);  
    }  

    delay(1000);  
}  

void sendToThingworx(String data) {  
    int commaIndex1 = data.indexOf(',');  
    int commaIndex2 = data.indexOf(',', commaIndex1 + 1);  
    
    if (commaIndex1 == -1 || commaIndex2 == -1) {  
        Serial.println("Data format error");  
        return; // Exit if the format is incorrect  
    }  

    String phValue = data.substring(0, commaIndex1);  
    String turbidityValue = data.substring(commaIndex1 + 1, commaIndex2);  
    String temperatureValue = data.substring(commaIndex2 + 1);  

    WiFiClient client;  
    if (client.connect(thingworxServer, 80)) {  
        // Create JSON formatted data  
        String postData = String("{\"values\": [{\"pH\": ") + phValue +  
                          String(", \"Turbidity\": ") + turbidityValue +  
                          String(", \"Temperature\": ") + temperatureValue + " }]}";  

        client.println("POST /Things/" + String(thingName) + "/ValueStreams/" + String(valueStream) + "/Entries HTTP/1.1");  
        client.println("Host: " + String(thingworxServer));  
        client.println("Content-Type: application/json");  
        client.println("Accept: application/json");  
        client.println("AppKey: " + String(appKey));  
        client.print("Content-Length: ");  
        client.println(postData.length());  
        client.println();  
        client.println(postData);  
        
        // Wait for response  
        while (client.connected()) {  
            String line = client.readStringUntil('\n');  
            if (line.length() == 0) {  
                break; // End of headers  
            }  
        }  
        Serial.println("Data sent to ThingWorx: " + postData);  
    } else {  
        Serial.println("Connection to ThingWorx failed");  
    }  
    client.stop();  
}
